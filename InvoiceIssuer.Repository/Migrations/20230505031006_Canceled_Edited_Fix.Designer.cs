// <auto-generated />
using System;
using InvoiceIssuer.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvoiceIssuer.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230505031006_Canceled_Edited_Fix")]
    partial class Canceled_Edited_Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasColumnType("char(30) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("char(30) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<string>("Complement")
                        .HasColumnType("char(20) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("char(10) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasColumnType("char(70) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(70);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("char(30) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(30) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6bcb227-e4ed-4952-baef-e9b70d235550"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 285, DateTimeKind.Utc).AddTicks(2410),
                            Description = "This type of company is free from tax applications",
                            Name = "Individual Business",
                            TaxRate = 0.0m
                        },
                        new
                        {
                            Id = new Guid("73bfea7f-fecf-4d59-8b37-ca802d10c6f7"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 285, DateTimeKind.Utc).AddTicks(4590),
                            Description = "Small company that is beginning",
                            Name = "Small Company",
                            TaxRate = 2.5m
                        },
                        new
                        {
                            Id = new Guid("b48b3a7a-368a-4e54-88c1-5a3415d116e9"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 285, DateTimeKind.Utc).AddTicks(4644),
                            Description = "Mid-port company",
                            Name = "Medium Company",
                            TaxRate = 4.5m
                        },
                        new
                        {
                            Id = new Guid("84c75355-4148-455e-bbba-059ff4d2dc0f"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 285, DateTimeKind.Utc).AddTicks(4667),
                            Description = "Large company with more branches",
                            Name = "Large Company",
                            TaxRate = 7.5m
                        });
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bool");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bool");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TakerId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TaxValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TakerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("char(7) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(7);

                    b.Property<string>("ComercialName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LogoPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("char(200) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(50) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ead2aabd-dc8c-496e-9284-6ddb5ce02498"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(6837),
                            Description = "Activities and plannings that includes software development, management and project architecture",
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("87486c90-8354-418c-816b-0c0dc04cb8ab"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7579),
                            Description = "Lead training sessions, workshops or presentations to help team members improve or learn a certain skill",
                            Name = "Training"
                        },
                        new
                        {
                            Id = new Guid("146ded85-36b5-4e00-8bb6-8e0a19c1f031"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7625),
                            Description = "Event planning service for office parties, fundraising events and other corporate functions",
                            Name = "Event planning"
                        },
                        new
                        {
                            Id = new Guid("dc88a24f-06e8-466f-8c46-581f04162e93"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7648),
                            Description = "Consulting services for a variety of projects, including financial budgeting, landscaping, audits and more",
                            Name = "Consulting"
                        },
                        new
                        {
                            Id = new Guid("81e7da92-379b-4e5d-9305-4c33329a90bc"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7671),
                            Description = "Marketing services for companies advertise their products, services and brand by creating marketing campaigns",
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("abe5922d-a921-4d8e-93d7-7f06e77e7f75"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7693),
                            Description = "Collect garbage and take it away to landfills and recycling facilities",
                            Name = "Waste management"
                        },
                        new
                        {
                            Id = new Guid("fcda8ca6-b4d6-4060-82ee-afae08efa1d4"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7716),
                            Description = "Service that project and execute construnctions for private and public areas",
                            Name = "Construction"
                        },
                        new
                        {
                            Id = new Guid("3c180d52-8505-4b5c-b138-ad641ae54427"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7739),
                            Description = "Draft business agreements, ask for advice or navigate a legal issue",
                            Name = "Law"
                        },
                        new
                        {
                            Id = new Guid("33994095-8abf-4a02-9792-4a2859ce6c84"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7761),
                            Description = "Medical assistance and health procedures",
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("e9ee0c8f-3c2a-4114-9415-da8df238d513"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7784),
                            Description = "Security services to ensure the safety of its employees and guests",
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("4c4e92af-ec1f-4d13-8442-335897167f19"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7807),
                            Description = "Financial procedures for companies or peoples",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("af4b74c9-1bba-4a45-84e7-95785ef655a2"),
                            CreatedAt = new DateTime(2023, 5, 5, 3, 10, 6, 286, DateTimeKind.Utc).AddTicks(7829),
                            Description = "Service for child care assistance",
                            Name = "Child care"
                        });
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Taker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("char(7) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(7);

                    b.Property<string>("ComercialName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Takers");
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("InvoiceIssuer.Domain.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceIssuer.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceIssuer.Domain.Entities.Taker", "Taker")
                        .WithMany()
                        .HasForeignKey("TakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Provider", b =>
                {
                    b.HasOne("InvoiceIssuer.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceIssuer.Domain.Entities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InvoiceIssuer.Domain.Entities.Taker", b =>
                {
                    b.HasOne("InvoiceIssuer.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceIssuer.Domain.Entities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
